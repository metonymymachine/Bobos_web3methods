"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkborder"] = self["webpackChunkborder"] || []).push([["vendors-node_modules_bnc-onboard_dist_esm_trezor-58f57f73_js"],{

/***/ "./node_modules/bnc-onboard/dist/esm/trezor-58f57f73.js":
/*!**************************************************************!*\
  !*** ./node_modules/bnc-onboard/dist/esm/trezor-58f57f73.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar trezorIcon = \"\\n\\t<svg width=\\\"40px\\\" height=\\\"40px\\\" viewBox=\\\"0 0 114 166\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n\\t\\t<g id=\\\"Styles\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n\\t\\t\\t<path d=\\\"M17,51.453125 L17,40 C17,17.90861 34.90861,-1.0658141e-14 57,-1.0658141e-14 C79.09139,-1.0658141e-14 97,17.90861 97,40 L97,51.453125 L113.736328,51.453125 L113.736328,139.193359 L57.5,166 L0,139.193359 L0,51.453125 L17,51.453125 Z M37,51.453125 L77,51.453125 L77,40 L76.9678398,40 C76.3750564,29.406335 67.6617997,21 57,21 C46.3382003,21 37.6249436,29.406335 37.0321602,40 L37,40 L37,51.453125 Z M23,72 L23,125 L56.8681641,140.966797 L91,125 L91,72 L23,72 Z\\\" id=\\\"Trezor-logo\\\" fill=\\\"currentColor\\\"></path>\\n\\t\\t</g>\\n\\t</svg>\\n\";\n\nfunction trezor(options) {\n  var rpcUrl = options.rpcUrl,\n      networkId = options.networkId,\n      email = options.email,\n      appUrl = options.appUrl,\n      preferred = options.preferred,\n      label = options.label,\n      iconSrc = options.iconSrc,\n      svg = options.svg,\n      customNetwork = options.customNetwork;\n  return {\n    name: label || 'Trezor',\n    svg: svg || trezorIcon,\n    iconSrc: iconSrc,\n    wallet: function () {\n      var _wallet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(helpers) {\n        var BigNumber, networkName, resetWalletState, provider;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                BigNumber = helpers.BigNumber, networkName = helpers.networkName, resetWalletState = helpers.resetWalletState;\n                _context4.next = 3;\n                return trezorProvider({\n                  rpcUrl: rpcUrl,\n                  networkId: networkId,\n                  email: email,\n                  appUrl: appUrl,\n                  BigNumber: BigNumber,\n                  networkName: networkName,\n                  customNetwork: customNetwork,\n                  resetWalletState: resetWalletState\n                });\n\n              case 3:\n                provider = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  provider: provider,\n                  \"interface\": {\n                    name: 'Trezor',\n                    connect: provider.enable,\n                    disconnect: provider.disconnect,\n                    address: {\n                      get: function () {\n                        var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                          return regeneratorRuntime.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  return _context.abrupt(\"return\", provider.getPrimaryAddress());\n\n                                case 1:\n                                case \"end\":\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee);\n                        }));\n\n                        function get() {\n                          return _get.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    },\n                    network: {\n                      get: function () {\n                        var _get2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  return _context2.abrupt(\"return\", networkId);\n\n                                case 1:\n                                case \"end\":\n                                  return _context2.stop();\n                              }\n                            }\n                          }, _callee2);\n                        }));\n\n                        function get() {\n                          return _get2.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    },\n                    balance: {\n                      get: function () {\n                        var _get3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                          var address;\n                          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                            while (1) {\n                              switch (_context3.prev = _context3.next) {\n                                case 0:\n                                  address = provider.getPrimaryAddress();\n                                  return _context3.abrupt(\"return\", address && provider.getBalance(address));\n\n                                case 2:\n                                case \"end\":\n                                  return _context3.stop();\n                              }\n                            }\n                          }, _callee3);\n                        }));\n\n                        function get() {\n                          return _get3.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    }\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function wallet(_x) {\n        return _wallet.apply(this, arguments);\n      }\n\n      return wallet;\n    }(),\n    type: 'hardware',\n    desktop: true,\n    mobile: true,\n    osExclusions: ['iOS'],\n    preferred: preferred\n  };\n}\n\nfunction trezorProvider(_x2) {\n  return _trezorProvider.apply(this, arguments);\n}\n\nfunction _trezorProvider() {\n  _trezorProvider = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(options) {\n    var TrezorConnectLibrary, _yield$import, Transaction, _yield$import2, Common, ethUtil, _yield$import3, createProvider, _yield$import4, generateAddresses, isValidPath, TrezorConnect, DEVICE_EVENT, DEVICE, TREZOR_DEFAULT_PATH, networkId, email, appUrl, rpcUrl, BigNumber, networkName, customNetwork, resetWalletState, dPath, addressToPath, enabled, customPath, account, provider, disconnect, setPath, _setPath, isCustomPath, enable, getAddress, _getAddress, addresses, setPrimaryAccount, getPublicKey, _getPublicKey, getPrimaryAddress, getMoreAccounts, _getMoreAccounts, _getAccounts, _getAccounts2, getBalances, getBalance, trezorSignTransaction, _signTransaction, _signTransaction2, _signMessage, _signMessage2;\n\n    return regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _signMessage2 = function _signMessage4() {\n              _signMessage2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(message) {\n                var _, address, path;\n\n                return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        if (!(addressToPath.size === 0)) {\n                          _context12.next = 3;\n                          break;\n                        }\n\n                        _context12.next = 3;\n                        return enable();\n\n                      case 3:\n                        _ = _slicedToArray(_toConsumableArray(addressToPath.entries())[0], 2), address = _[0], path = _[1];\n                        return _context12.abrupt(\"return\", new Promise(function (resolve, reject) {\n                          TrezorConnect.ethereumSignMessage({\n                            path: path,\n                            message: ethUtil.stripHexPrefix(message.data),\n                            hex: true\n                          }).then(function (response) {\n                            if (response.success) {\n                              if (response.payload.address !== ethUtil.toChecksumAddress(address)) {\n                                reject(new Error('signature doesnt match the right address'));\n                              }\n\n                              var signature = \"0x\".concat(response.payload.signature);\n                              resolve(signature);\n                            } else {\n                              reject(new Error(response.payload && response.payload.error || 'There was an error signing a message'));\n                            }\n                          });\n                        }));\n\n                      case 5:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee12);\n              }));\n              return _signMessage2.apply(this, arguments);\n            };\n\n            _signMessage = function _signMessage3(_x9) {\n              return _signMessage2.apply(this, arguments);\n            };\n\n            _signTransaction2 = function _signTransaction4() {\n              _signTransaction2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(transactionData) {\n                var _transactionData$gas;\n\n                var path, BN, toBuffer, common, transaction, trezorResult, v, rv, cv;\n                return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        if (!(addressToPath.size === 0)) {\n                          _context11.next = 3;\n                          break;\n                        }\n\n                        _context11.next = 3;\n                        return enable();\n\n                      case 3:\n                        path = _toConsumableArray(addressToPath.values())[0];\n                        BN = ethUtil.BN, toBuffer = ethUtil.toBuffer;\n                        common = new Common({\n                          chain: customNetwork || networkName(networkId)\n                        });\n                        transaction = Transaction.fromTxData(_objectSpread(_objectSpread({}, transactionData), {}, {\n                          gasLimit: (_transactionData$gas = transactionData.gas) !== null && _transactionData$gas !== void 0 ? _transactionData$gas : transactionData.gasLimit\n                        }), {\n                          common: common,\n                          freeze: false\n                        });\n                        transaction.v = new BN(toBuffer(networkId));\n                        transaction.r = transaction.s = new BN(toBuffer(0));\n                        _context11.next = 11;\n                        return trezorSignTransaction(path, transactionData);\n\n                      case 11:\n                        trezorResult = _context11.sent;\n\n                        if (trezorResult.success) {\n                          _context11.next = 14;\n                          break;\n                        }\n\n                        throw new Error(trezorResult.payload.error);\n\n                      case 14:\n                        v = trezorResult.payload.v.toString(16); // EIP155 support. check/recalc signature v value.\n\n                        rv = parseInt(v, 16);\n                        cv = networkId * 2 + 35;\n\n                        if (rv !== cv && (rv & cv) !== rv) {\n                          cv += 1; // add signature v bit.\n                        }\n\n                        v = cv.toString(16);\n                        transaction.v = new BN(toBuffer(\"0x\".concat(v)));\n                        transaction.r = new BN(toBuffer(\"\".concat(trezorResult.payload.r)));\n                        transaction.s = new BN(toBuffer(\"\".concat(trezorResult.payload.s)));\n                        return _context11.abrupt(\"return\", \"0x\".concat(transaction.serialize().toString('hex')));\n\n                      case 23:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee11);\n              }));\n              return _signTransaction2.apply(this, arguments);\n            };\n\n            _signTransaction = function _signTransaction3(_x8) {\n              return _signTransaction2.apply(this, arguments);\n            };\n\n            trezorSignTransaction = function _trezorSignTransactio(path, transactionData) {\n              var nonce = transactionData.nonce,\n                  gasPrice = transactionData.gasPrice,\n                  gas = transactionData.gas,\n                  to = transactionData.to,\n                  value = transactionData.value,\n                  data = transactionData.data;\n              return TrezorConnect.ethereumSignTransaction({\n                path: path,\n                transaction: {\n                  nonce: nonce,\n                  gasPrice: gasPrice,\n                  gasLimit: gas,\n                  to: to,\n                  value: value || '',\n                  data: data || '',\n                  chainId: networkId\n                }\n              });\n            };\n\n            getBalance = function _getBalance(address) {\n              return new Promise(function (resolve, reject) {\n                provider.sendAsync({\n                  jsonrpc: '2.0',\n                  method: 'eth_getBalance',\n                  params: [address, 'latest'],\n                  id: 42\n                }, function (e, res) {\n                  e && reject(e);\n                  var result = res && res.result;\n\n                  if (result != null) {\n                    resolve(new BigNumber(result).toString(10));\n                  } else {\n                    resolve(null);\n                  }\n                });\n              });\n            };\n\n            getBalances = function _getBalances(addresses) {\n              return Promise.all(addresses.map(function (address) {\n                return new Promise( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(resolve) {\n                    var balance;\n                    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return getBalance(address);\n\n                          case 2:\n                            balance = _context5.sent;\n                            resolve({\n                              address: address,\n                              balance: balance\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x7) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n              }));\n            };\n\n            _getAccounts2 = function _getAccounts4() {\n              _getAccounts2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(getMore) {\n                var addressInfo;\n                return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                  while (1) {\n                    switch (_context10.prev = _context10.next) {\n                      case 0:\n                        if (enabled) {\n                          _context10.next = 2;\n                          break;\n                        }\n\n                        return _context10.abrupt(\"return\", [undefined]);\n\n                      case 2:\n                        if (!(addressToPath.size > 0 && !getMore)) {\n                          _context10.next = 4;\n                          break;\n                        }\n\n                        return _context10.abrupt(\"return\", addresses());\n\n                      case 4:\n                        if (dPath === '') {\n                          dPath = TREZOR_DEFAULT_PATH;\n                        }\n\n                        if (account) {\n                          _context10.next = 15;\n                          break;\n                        }\n\n                        _context10.prev = 6;\n                        _context10.next = 9;\n                        return getPublicKey();\n\n                      case 9:\n                        account = _context10.sent;\n                        _context10.next = 15;\n                        break;\n\n                      case 12:\n                        _context10.prev = 12;\n                        _context10.t0 = _context10[\"catch\"](6);\n                        throw _context10.t0;\n\n                      case 15:\n                        addressInfo = generateAddresses(account, addressToPath.size);\n                        addressInfo.forEach(function (_ref4) {\n                          var dPath = _ref4.dPath,\n                              address = _ref4.address;\n                          addressToPath.set(address, dPath);\n                        });\n                        return _context10.abrupt(\"return\", addresses());\n\n                      case 18:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }\n                }, _callee10, null, [[6, 12]]);\n              }));\n              return _getAccounts2.apply(this, arguments);\n            };\n\n            _getAccounts = function _getAccounts3(_x6) {\n              return _getAccounts2.apply(this, arguments);\n            };\n\n            _getMoreAccounts = function _getMoreAccounts3() {\n              _getMoreAccounts = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                var accounts;\n                return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        _context9.next = 2;\n                        return _getAccounts(true);\n\n                      case 2:\n                        accounts = _context9.sent;\n                        return _context9.abrupt(\"return\", getBalances(accounts));\n\n                      case 4:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee9);\n              }));\n              return _getMoreAccounts.apply(this, arguments);\n            };\n\n            getMoreAccounts = function _getMoreAccounts2() {\n              return _getMoreAccounts.apply(this, arguments);\n            };\n\n            getPrimaryAddress = function _getPrimaryAddress() {\n              return enabled ? addresses()[0] : undefined;\n            };\n\n            _getPublicKey = function _getPublicKey3() {\n              _getPublicKey = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                var result;\n                return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                  while (1) {\n                    switch (_context8.prev = _context8.next) {\n                      case 0:\n                        if (dPath) {\n                          _context8.next = 2;\n                          break;\n                        }\n\n                        throw new Error('a derivation path is needed to get the public key');\n\n                      case 2:\n                        _context8.prev = 2;\n                        _context8.next = 5;\n                        return TrezorConnect.getPublicKey({\n                          path: dPath,\n                          coin: 'eth'\n                        });\n\n                      case 5:\n                        result = _context8.sent;\n\n                        if (result.success) {\n                          _context8.next = 8;\n                          break;\n                        }\n\n                        throw new Error(result.payload.error);\n\n                      case 8:\n                        account = {\n                          publicKey: result.payload.publicKey,\n                          chainCode: result.payload.chainCode,\n                          path: result.payload.serializedPath\n                        };\n                        return _context8.abrupt(\"return\", account);\n\n                      case 12:\n                        _context8.prev = 12;\n                        _context8.t0 = _context8[\"catch\"](2);\n                        throw new Error('There was an error accessing your Trezor accounts.');\n\n                      case 15:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }\n                }, _callee8, null, [[2, 12]]);\n              }));\n              return _getPublicKey.apply(this, arguments);\n            };\n\n            getPublicKey = function _getPublicKey2() {\n              return _getPublicKey.apply(this, arguments);\n            };\n\n            setPrimaryAccount = function _setPrimaryAccount(address) {\n              // make a copy and put in an array\n              var accounts = _toConsumableArray(addressToPath.entries());\n\n              var accountIndex = accounts.findIndex(function (_ref) {\n                var _ref2 = _slicedToArray(_ref, 1),\n                    accountAddress = _ref2[0];\n\n                return accountAddress === address;\n              }); // pull the item at the account index out of the array and place at the front\n\n              accounts.unshift(accounts.splice(accountIndex, 1)[0]); // reassign addressToPath to new ordered accounts\n\n              addressToPath = new Map(accounts);\n            };\n\n            addresses = function _addresses() {\n              return Array.from(addressToPath.keys());\n            };\n\n            _getAddress = function _getAddress3() {\n              _getAddress = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(path) {\n                var errorMsg, result;\n                return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        errorMsg = \"Unable to derive address from path \".concat(path);\n                        _context7.prev = 1;\n                        _context7.next = 4;\n                        return TrezorConnect.ethereumGetAddress({\n                          path: path,\n                          showOnTrezor: false\n                        });\n\n                      case 4:\n                        result = _context7.sent;\n\n                        if (result.success) {\n                          _context7.next = 7;\n                          break;\n                        }\n\n                        throw new Error(errorMsg);\n\n                      case 7:\n                        return _context7.abrupt(\"return\", result.payload.address);\n\n                      case 10:\n                        _context7.prev = 10;\n                        _context7.t0 = _context7[\"catch\"](1);\n                        throw new Error(errorMsg);\n\n                      case 13:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _callee7, null, [[1, 10]]);\n              }));\n              return _getAddress.apply(this, arguments);\n            };\n\n            getAddress = function _getAddress2(_x5) {\n              return _getAddress.apply(this, arguments);\n            };\n\n            enable = function _enable() {\n              enabled = true;\n              return _getAccounts();\n            };\n\n            isCustomPath = function _isCustomPath() {\n              return customPath;\n            };\n\n            _setPath = function _setPath3() {\n              _setPath = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(path, custom) {\n                var address;\n                return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        if (isValidPath(path)) {\n                          _context6.next = 2;\n                          break;\n                        }\n\n                        return _context6.abrupt(\"return\", false);\n\n                      case 2:\n                        if (path !== dPath) {\n                          // clear any exsting addresses if different path\n                          addressToPath = new Map();\n                        }\n\n                        if (!custom) {\n                          _context6.next = 17;\n                          break;\n                        }\n\n                        _context6.prev = 4;\n                        _context6.next = 7;\n                        return getAddress(path);\n\n                      case 7:\n                        address = _context6.sent;\n                        addressToPath.set(address, path);\n                        dPath = path;\n                        customPath = true;\n                        return _context6.abrupt(\"return\", true);\n\n                      case 14:\n                        _context6.prev = 14;\n                        _context6.t0 = _context6[\"catch\"](4);\n                        throw new Error(\"There was a problem deriving an address from path \".concat(path));\n\n                      case 17:\n                        customPath = false;\n                        dPath = path;\n                        return _context6.abrupt(\"return\", true);\n\n                      case 20:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6, null, [[4, 14]]);\n              }));\n              return _setPath.apply(this, arguments);\n            };\n\n            setPath = function _setPath2(_x3, _x4) {\n              return _setPath.apply(this, arguments);\n            };\n\n            disconnect = function _disconnect() {\n              dPath = '';\n              addressToPath = new Map();\n              enabled = false;\n              provider.stop();\n            };\n\n            _context13.next = 25;\n            return __webpack_require__.e(/*! import() */ \"vendors-node_modules_trezor-connect_lib_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! trezor-connect */ \"./node_modules/trezor-connect/lib/index.js\", 23));\n\n          case 25:\n            TrezorConnectLibrary = _context13.sent;\n            _context13.next = 28;\n            return Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @ethereumjs/tx */ \"./node_modules/@ethereumjs/tx/dist.browser/index.js\", 23));\n\n          case 28:\n            _yield$import = _context13.sent;\n            Transaction = _yield$import.Transaction;\n            _context13.next = 32;\n            return Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @ethereumjs/common */ \"./node_modules/@ethereumjs/common/dist.browser/index.js\", 23));\n\n          case 32:\n            _yield$import2 = _context13.sent;\n            Common = _yield$import2[\"default\"];\n            _context13.next = 36;\n            return Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! ethereumjs-util */ \"./node_modules/ethereumjs-util/dist.browser/index.js\", 23));\n\n          case 36:\n            ethUtil = _context13.sent;\n            _context13.next = 39;\n            return Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_eth-rpc-errors_dist_index_js\"), __webpack_require__.e(\"vendors-node_modules_eth-block-tracker_src_polling_js-node_modules_eth-json-rpc-filters_subsc-c58c54\"), __webpack_require__.e(\"vendors-node_modules_ethereumjs-abi_index_js\"), __webpack_require__.e(\"vendors-node_modules_json-stable-stringify_index_js-node_modules_lodash_keys_js-node_modules_-f278bc\"), __webpack_require__.e(\"vendors-node_modules_async_eachSeries_js-node_modules_async_map_js-node_modules_async_paralle-cac9b5\"), __webpack_require__.e(\"vendors-node_modules_bnc-onboard_dist_esm_providerEngine-c1d8840e_js\"), __webpack_require__.e(\"_c0d0\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./providerEngine-c1d8840e.js */ \"./node_modules/bnc-onboard/dist/esm/providerEngine-c1d8840e.js\"));\n\n          case 39:\n            _yield$import3 = _context13.sent;\n            createProvider = _yield$import3[\"default\"];\n            _context13.next = 43;\n            return Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_hdkey_lib_hdkey_js\"), __webpack_require__.e(\"node_modules_bnc-onboard_dist_esm_hd-wallet-51018814_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./hd-wallet-51018814.js */ \"./node_modules/bnc-onboard/dist/esm/hd-wallet-51018814.js\"));\n\n          case 43:\n            _yield$import4 = _context13.sent;\n            generateAddresses = _yield$import4.generateAddresses;\n            isValidPath = _yield$import4.isValidPath;\n            TrezorConnect = TrezorConnectLibrary[\"default\"], DEVICE_EVENT = TrezorConnectLibrary.DEVICE_EVENT, DEVICE = TrezorConnectLibrary.DEVICE;\n            TREZOR_DEFAULT_PATH = \"m/44'/60'/0'/0\";\n            networkId = options.networkId, email = options.email, appUrl = options.appUrl, rpcUrl = options.rpcUrl, BigNumber = options.BigNumber, networkName = options.networkName, customNetwork = options.customNetwork, resetWalletState = options.resetWalletState;\n            dPath = '';\n            addressToPath = new Map();\n            enabled = false;\n            customPath = false;\n            TrezorConnect.manifest({\n              email: email,\n              appUrl: appUrl\n            });\n            provider = createProvider({\n              getAccounts: function getAccounts(callback) {\n                _getAccounts().then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              signTransaction: function signTransaction(transactionData, callback) {\n                _signTransaction(transactionData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              processMessage: function processMessage(messageData, callback) {\n                _signMessage(messageData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              processPersonalMessage: function processPersonalMessage(messageData, callback) {\n                _signMessage(messageData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              signMessage: function signMessage(messageData, callback) {\n                _signMessage(messageData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              signPersonalMessage: function signPersonalMessage(messageData, callback) {\n                _signMessage(messageData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              rpcUrl: rpcUrl\n            });\n            TrezorConnect.on(DEVICE_EVENT, function (event) {\n              if (event.type === DEVICE.DISCONNECT) {\n                provider.stop();\n                resetWalletState({\n                  disconnected: true,\n                  walletName: 'Trezor'\n                });\n              }\n            });\n            provider.setPath = setPath;\n            provider.dPath = dPath;\n            provider.enable = enable;\n            provider.setPrimaryAccount = setPrimaryAccount;\n            provider.getPrimaryAddress = getPrimaryAddress;\n            provider.getAccounts = _getAccounts;\n            provider.getMoreAccounts = getMoreAccounts;\n            provider.getBalance = getBalance;\n            provider.getBalances = getBalances;\n            provider.send = provider.sendAsync;\n            provider.disconnect = disconnect;\n            provider.isCustomPath = isCustomPath;\n            return _context13.abrupt(\"return\", provider);\n\n          case 69:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _trezorProvider.apply(this, arguments);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (trezor);\n\n//# sourceURL=webpack://border/./node_modules/bnc-onboard/dist/esm/trezor-58f57f73.js?");

/***/ })

}]);